#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>

typedef char element;
typedef struct {
	int cap;
	int top;
	element* data;
}stacktype;

void init_stack(stacktype* s) {
	s->cap = 1;
	s->top = -1;
	s->data = (element*)malloc(sizeof(element));
}

int is_full(stacktype* s) {
	if (s->top == (s->cap) - 1) return 1;
	return 0;
}

int is_empty(stacktype* s) {
	if (s->top == -1) return 1;
	return 0;
}

void push(stacktype* s, element item) {
	if (is_full(s)) {
		s->cap *= 2;
		s->data = (element*)realloc(s->data, s->cap * sizeof(element));
	}
	s->data[++(s->top)] = item;
}

element pop(stacktype* s) {
	if (is_empty(s)) {
		fprintf(stderr, "스택 공백 에러");
		exit(1);
	}
	else return s->data[(s->top)--];
}

element peek(stacktype* s) {
	if (is_empty(s)) {
		fprintf(stderr, "스택 공백 에러");
		exit(1);
	}
	else return s->data[(s->top)];
}

int eval(char v[30]) {
	stacktype s;
	init_stack(&s);

	int op1, op2, value;
	int n = strlen(v);

	for (int i = 0; i < n; i++) {
		if (v[i] == '+' || v[i] == '-' || v[i] == '*' || v[i] == '/') {
			op2 = pop(&s);
			op1 = pop(&s);
			if (v[i] == '+') {
				value = op1 + op2;
				push(&s, value);
			}
			else if (v[i] == '-') {
				value = op1 - op2;
				push(&s, value);
			}
			else if (v[i] == '*') {
				value = op1 * op2;
				push(&s, value);
			}
			else if (v[i] == '/') {
				value = op1 / op2;
				push(&s, value);
			}
		}
		else {
			value = v[i] - '0';
			push(&s, value);
		}
	}

	return pop(&s);
}

int main()
{
	char v[30] = "82/3-32*+";
	int ret = eval(v);
	printf("결과값은 %d", ret);
	

	return 0;
}
