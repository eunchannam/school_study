#include <stdlib.h>
#include <stdio.h>
#include <malloc.h>
#include <string>

typedef struct {
	int key;
}element;

typedef struct {
	element heap[20];
	int heap_size;
}heapType;

void insert_max_heap(heapType* h, element item) {
	int i;
	i = ++(h->heap_size);
	while (i != 1 && item.key > h->heap[i / 2].key) {
		h->heap[i] = h->heap[i / 2];
		i /= 2;
	}
	h->heap[i] = item;
}

/*void insert_max_heap(heapType* h, element item) { //내가 만든거
	int i;
	i = ++(h->heap_size);
	h->heap[i] = item;
	while (i != 1 && h->heap[i].key > h->heap[i / 2].key) {
		element temp = h->heap[i];
		h->heap[i] = h->heap[i / 2];
		h->heap[i / 2] = temp;
	}
}*/

element delete_max_heap(heapType* h) {
	int parent, child;
	element item, temp;

	item = h->heap[1];
	temp = h->heap[(h->heap_size)--];
	parent = 1;
	child = 2;
	while (child <= h->heap_size) {
		if (child < h->heap_size && h->heap[child].key < h->heap[child + 1].key) {
			child++;
		}
		if (temp.key >= h->heap[child].key) break;
		h->heap[parent] = h->heap[child];
		parent = child;
		child *= 2;
	}
	h->heap[parent] = temp;
	return item;
}

void heap_sort(element* v, int n) {
	heapType* h = (heapType*)malloc(sizeof(heapType));
	h->heap_size = n;

	for (int i = 0; i < n; i++) {
		insert_max_heap(h, v[i]);
	}

	for (int i = n - 1; i >= 0; i--) {
		v[i] = delete_max_heap(h);
	}
	free(h);
}

int main()
{
	element list[8] = { 23, 56, 11, 9, 56, 99, 37, 34 };
	heap_sort(list, 8);
	for (int i = 0; i < 8; i++) {
		printf("%d ", list[i].key);
	}



	return 0;
}
