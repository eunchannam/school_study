TreeNode* search(TreeNode* node, int key) {
	while (node != NULL) {
		if (node->data == key) return node;
		if (node->data < key) node = node->right;
		else if (node->data > key) node = node->left;
	}
	return NULL;
}

TreeNode* insert_node(TreeNode* node, int key) {
	if (node == NULL) return new_node(key);
	if (node->data > key) {
		node->left = insert_node(node->left, key);
	}
	else if (node->data < key) {
		node->right = insert_node(node->right, key);
	}
}

TreeNode* new_node(int key) {
	TreeNode* temp = (TreeNode*)malloc(sizeof(TreeNode));
	temp->data = key;
	temp->left = temp->right = NULL;
	return temp;
}

TreeNode* min_value_node(TreeNode* node) {
	while (node->left != NULL) {
		node = node->left;
	}
	return node;
}

TreeNode* delete_node(TreeNode* node, int key) {
	if (node == NULL) return node;
	if (node->data > key) {
		node->left = delete_node(node->left, key);
	}
	else if (node->data < key) {
		node->right = delete_node(node->right, key);
	}
	else {
		if (node->left == NULL) {
			TreeNode* temp = node->right;
			free(node);
			return temp;
		}
		else if (node->right == NULL) {
			TreeNode* temp = node->left;
			free(node);
			return temp; 
		}

		else {
			TreeNode* temp = min_value_node(node->right);
			node->data = temp->data;

			node->right = delete_node(node->right, temp->data);
		}
	}
}
