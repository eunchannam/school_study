#include <stdlib.h>
#include <stdio.h>
#include <malloc.h>
#include <string>


typedef struct node {
	int coef;
	int expon;
	struct node * link;
}Node;

typedef struct ListType {
	int size;
	Node* head;
	Node* tail;
}ListType;

ListType* create() {
	ListType* plist = (ListType*)malloc(sizeof(ListType));
	plist->size = 0;
	plist->tail = plist->head = NULL;
	return plist;
}

void insert_last(ListType* plist, int coef, int expon) {
	Node* temp = (Node*)malloc(sizeof(Node));
	temp->coef = coef;
	temp->expon = expon;
	temp->link = NULL;

	if (plist->tail == NULL) {
		plist->tail = plist->head = temp;
	}
	else {
		plist->tail->link = temp;
		plist->tail = temp;
	}
	plist->size++;
}

void add_poly(ListType* plist1, ListType* plist2, ListType* plist3) {
	Node* a = plist1->head;
	Node* b = plist2->head;

	int sum;
	while (a != NULL && b != NULL) {
		if (a->expon == b->expon) {
			sum = a->coef + b->coef;
			if (sum != 0) insert_last(plist3, sum, a->expon);
			a = a->link; b = b->link;
		}
		else if (a->expon > b->expon) {
			insert_last(plist3, a->coef, a->expon);
			a = a->link;
		}
		else {
			insert_last(plist3, b->coef, b->expon);
			b = b->link;
		}
	}
	for (; a != NULL; a = a->link) insert_last(plist3, a->coef, a->expon);
	for (; b != NULL; b = b->link) insert_last(plist3, b->coef, b->expon);
}

void print(ListType* plist) {
	Node* p = plist->head;

	for (p; p != NULL; p = p->link) {
		printf("%dx^%d + ", p->coef, p->expon);
	}
}


int main()
{
	ListType* list1, * list2, * list3;
	list1 = create();
	list2 = create();
	list3 = create();

	insert_last(list1, 3, 5);
	insert_last(list1, 5, 4);
	insert_last(list1, 6, 2);
	insert_last(list1, 4, 0);
	insert_last(list2, 3, 5);
	insert_last(list2, 5, 4);
	insert_last(list2, 6, 2);
	insert_last(list2, 4, 0);

	add_poly(list1, list2, list3);

	print(list3);

	return 0;
}
