#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#define size 100

typedef char element;

typedef struct {
	element* data;
	int top;
	int cap;
}stacktype;

void init_stack(stacktype* s) {
	s->top = -1;
	s->cap = 1;
	s->data = (element*)malloc(sizeof(element));
}

int is_empty(stacktype* s) {
	if (s->top == -1) return 1;
	return 0;
}

int is_full(stacktype* s) {
	if (s->top == (s->cap) - 1) return 1;
	return 0;
}

void push(stacktype* s, element item) {
	if (is_full(s)) {
		s->cap *= 2;
		s->data = (element*)realloc(s->data, s->cap * sizeof(element));
	}
	s->data[++(s->top)] = item;
}

element pop(stacktype* s) {
	if (is_empty(s)) {
		fprintf(stderr, "스택 공백 에러");
		exit(1);
	}
	else return s->data[(s->top)--];
}

element peek(stacktype* s) {
	if (is_empty(s)) {
		fprintf(stderr, "스택 공백 에러");
		exit(1);
	}
	else return s->data[(s->top)];
}

int check(char* v) {
	stacktype s;
	init_stack(&s);

	char ch;
	int n = strlen(v);

	for (int i = 0; i < n; i++) {
		if (v[i] == '(' || v[i] == '{' || v[i] == '[') {
			push(&s, v[i]);
		}
		else if (v[i] == ')' || v[i] == ']' || v[i] == '}') {
			ch = pop(&s);
			if (!((ch == '(' && v[i] == ')') || (ch == '{' && v[i] == '}') || (ch == '[' && v[i] == ']'))) return 0;
		}
	}

	if (is_empty(&s) == 0) return 0;
	return 1;
}

int main()
{
	char v[20];
	strcpy_s(v, "{ A[(i + 1)] = 0; }");

	if (check(v)) {
		printf("OK");
	}
	else printf("X");

	return 0;
}
