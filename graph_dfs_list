#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

int visited[10];

typedef struct graphNode {
	int vertex;
	struct graphNode* link;
}graphNode;

typedef struct graphType {
	int n;
	graphNode* adj_list[10];
}graphType;

void init(graphType* g){
	int v;
	g->n = 0;
	for(v=0; v < 10; v++){
		g->adj_list[v] = NULL;
	}
}

void insert_vertex(graphType* g, int v){
	if (((g->n) + 1) > 10){
		fprintf(stderr, "그래프: 정점의 개수 초과");
		return;
	}
	g->n++;
}

void insert_edge(graphType* g, int u, int v){
	graphNode* node = (graphNode*)malloc(sizeof(graphNode));
	node->vertex = v;
	node->link = g->adj_list[u];
	g->adj_list[u] = node;
}

int calculateOutDegree(GraphType* g, int v) { 
	int degree;
	GraphNode* node=g->adj_list[v]; 
	while(node!=NULL) { 
		degree++; node=node->link;
	} 
	return degree; 
}

int calculateInDegree(GraphType* g, int v) { 
	int degree; 
	for(int i=0;i g->n;i++) { 
		node=g->adj_list[i]; 
		while(node!=NULL) { 
			if((node->vertex)==v) degree++; 
			node=node->link; 
			} 
		} 
		return degree; 
}



void print(graphType* g){
	for(int i = 0; i < g->n; i++){
		graphNode* p = g->adj_list[i];
		printf("정점 %d의 인접 리스트 ", i);
		while(p != NULL){
			printf("-> %d ", p->vertex);
			p = p->link;
		}
		printf("\n");
	}
}

void dfs_list(graphType* g, int v) {
	graphNode* w;
	visited[v] = 1;
	printf("%d ->", v);
	for (w = g->adj_list[v]->link; w != NULL; w = w->link) {
		if (visited[w->vertex] != 1) {
			dfs_list(g, w->vertex);
		}
	}
}

int main()
{
	return 0;
}
